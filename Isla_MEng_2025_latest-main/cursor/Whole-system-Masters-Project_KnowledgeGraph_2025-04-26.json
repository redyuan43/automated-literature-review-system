{
    "nodes": [
        {
            "id": "step1.py",
            "name": "step1.py",
            "type": "file",
            "filePath": "step1.py",
            "summary": "Handles initial document processing: reads markdown files, extracts metadata, chunks content, generates embeddings, and creates the FAISS index.",
            "observations": [
                "Entry point for document indexing pipeline.",
                "Uses SentenceTransformer for embeddings.",
                "Relies on FAISS for vector storage.",
                "Reads from './files_mmd', writes to './embeddings'."
            ]
        },
        {
            "id": "step2.py",
            "name": "step2.py",
            "type": "file",
            "filePath": "step2.py",
            "summary": "Generates research questions and structured reports based on a topic, utilizing the FAISS index, a custom Gemma LLM client, and CrossRef API.",
            "observations": [
                "Core report generation logic.",
                "Implements a custom LLM client (`CustomGemmaClient`) for Gemma models.",
                "Handles vector store loading and similarity search.",
                "Includes logic for checking section repetition and rewriting.",
                "Writes chapter outputs to './initial_chapters'."
            ]
        },
        {
            "id": "step3.py",
            "name": "step3.py",
            "type": "file",
            "filePath": "step3.py",
            "summary": "Implements an iterative review and improvement process for generated chapters using Autogen agents (Technical, Clarity, Structure, Fact-Checking, Moderator).",
            "observations": [
                "Uses Autogen framework for multi-agent collaboration.",
                "Integrates quality assessment functions from `final_evaluation.py`.",
                "Calls rewrite function from `rewrite_function.py`.",
                "Saves detailed iteration outputs and final markdown chapters.",
                "Reads from './initial_chapters', writes to './outputs', './logs', './chapter_markdowns'."
            ]
        },
        {
            "id": "step4.py",
            "name": "step4.py",
            "type": "file",
            "filePath": "step4.py",
            "summary": "Generates Mermaid concept diagrams from the final markdown chapter files.",
            "observations": [
                "Uses an LLM (Gemma) to generate Mermaid syntax.",
                "Reads from './chapter_markdowns', writes diagrams to './chapter_diagrams'."
            ]
        },
        {
            "id": "rewrite_function.py",
            "name": "rewrite_function.py",
            "type": "file",
            "filePath": "rewrite_function.py",
            "summary": "Provides the core LLM-based text rewriting functionality used by step3.py, including model loading and prompt creation.",
            "observations": [
                "Contains the primary `rewrite_text` function.",
                "Includes shared `CustomGemmaClient` and `load_shared_model` used by other steps.",
                "Can process JSON files containing improvement points."
            ]
        },
        {
            "id": "final_evaluation.py",
            "name": "final_evaluation.py",
            "type": "file",
            "filePath": "final_evaluation.py",
            "summary": "Contains functions for assessing the quality of generated text based on metrics like technical depth, clarity, structure, and citation accuracy.",
            "observations": [
                "Provides quantitative and qualitative evaluation metrics.",
                "Uses spaCy, textstat, and OpenAI (GPT-4) for different aspects of evaluation.",
                "Functions are called by `step3.py`."
            ]
        },
        {
            "id": "fine_tune.py",
            "name": "fine_tune.py",
            "type": "file",
            "filePath": "fine_tune.py",
            "summary": "Script for fine-tuning a language model (Mistral-7B) using the generated chapter markdown files as training data.",
            "observations": [
                "Uses Hugging Face Transformers, Datasets, and PEFT (LoRA).",
                "Reads training data from './chapter_markdowns'.",
                "Saves the fine-tuned model to './fine_tuned_model'."
            ]
        },
        {
            "id": "environment.yml",
            "name": "environment.yml",
            "type": "file",
            "filePath": "environment.yml",
            "summary": "Defines the Conda environment and Python package dependencies for the project.",
            "observations": [
                "Specifies Python version (3.10) and CUDA toolkit (11.8).",
                "Lists key libraries like PyTorch, Transformers, Autogen, LangChain, FAISS, spaCy, OpenAI."
            ]
        },
        {
            "id": "batch_script.sh",
            "name": "batch_script.sh",
            "type": "file",
            "filePath": "batch_script.sh",
            "summary": "SLURM batch script to execute the main project pipeline (steps 1-4, fine_tune).",
            "observations": [
                "Configures SLURM resources (GPU, memory, time).",
                "Sets up the environment (modules, conda).",
                "Executes Python scripts sequentially."
            ]
        },
        {
            "id": "batch_script_test.sh",
            "name": "batch_script_test.sh",
            "type": "file",
            "filePath": "batch_script_test.sh",
            "summary": "A variant SLURM batch script, possibly for testing purposes.",
            "observations": [
                "Uses a different CUDA version (12.5) and environment (`llm_env`)."
            ]
        },
        {
            "id": "batch_script_rui.sh",
            "name": "batch_script_rui.sh",
            "type": "file",
            "filePath": "batch_script_rui.sh",
            "summary": "Another variant SLURM batch script, potentially user-specific (Rui).",
            "observations": [
                "Includes more detailed logging and monitoring.",
                "Some steps (2, 3, 4) are commented out."
            ]
        },
        {
            "id": "dir_embeddings",
            "name": "embeddings/",
            "type": "directory",
            "filePath": "./embeddings/",
            "summary": "Stores the generated FAISS index and associated metadata.",
            "observations": [
                "Output directory for `step1.py`.",
                "Input directory for `step2.py`."
            ]
        },
        {
            "id": "dir_files_mmd",
            "name": "files_mmd/",
            "type": "directory",
            "filePath": "./files_mmd/",
            "summary": "Contains the input markdown files (presumably research papers) for processing.",
            "observations": [
                "Input directory for `step1.py`."
            ]
        },
        {
            "id": "dir_initial_chapters",
            "name": "initial_chapters/",
            "type": "directory",
            "filePath": "./initial_chapters/",
            "summary": "Stores the initial structured reports (JSON format) generated by step2.py.",
            "observations": [
                "Output directory for `step2.py`.",
                "Input directory for `step3.py`."
            ]
        },
        {
            "id": "dir_outputs",
            "name": "outputs/",
            "type": "directory",
            "filePath": "./outputs/",
            "summary": "Stores the consolidated JSON outputs from the iterative review process in step3.py.",
            "observations": [
                "Output directory for `step3.py`.",
                "Can be input for `rewrite_function.py`."
            ]
        },
        {
            "id": "dir_chapter_markdowns",
            "name": "chapter_markdowns/",
            "type": "directory",
            "filePath": "./chapter_markdowns/",
            "summary": "Stores the final improved chapter content in Markdown format, generated by step3.py.",
            "observations": [
                "Output directory for `step3.py`.",
                "Input directory for `step4.py` and `fine_tune.py`."
            ]
        },
        {
            "id": "dir_chapter_diagrams",
            "name": "chapter_diagrams/",
            "type": "directory",
            "filePath": "./chapter_diagrams/",
            "summary": "Stores the generated Mermaid concept diagrams (Markdown format).",
            "observations": [
                "Output directory for `step4.py`."
            ]
        },
        {
            "id": "dir_logs",
            "name": "logs/",
            "type": "directory",
            "filePath": "./logs/",
            "summary": "Contains log files generated during script execution.",
            "observations": [
                "Output directory for logging in `step3.py` and `step4.py`."
            ]
        },
        {
            "id": "dir_fine_tuned_model",
            "name": "fine_tuned_model/",
            "type": "directory",
            "filePath": "./fine_tuned_model/",
            "summary": "Target directory for saving the fine-tuned model.",
            "observations": [
                "Output directory for `fine_tune.py`."
            ]
        },
        {
            "id": "dir_cursor",
            "name": "cursor/",
            "type": "directory",
            "filePath": "./cursor/",
            "summary": "Directory potentially used by the Cursor IDE or related tooling.",
            "observations": [
                "Contains previous knowledge graph output."
            ]
        },
        {
            "id": "step1.py#create_faiss_database",
            "name": "create_faiss_database",
            "type": "function",
            "filePath": "step1.py",
            "summary": "Generates embeddings for document chunks and builds/saves a FAISS index.",
            "observations": [
                "Uses SentenceTransformer model.",
                "Saves index and metadata to './embeddings'."
            ]
        },
        {
            "id": "step2.py#generate_report",
            "name": "generate_report",
            "type": "function",
            "filePath": "step2.py",
            "summary": "Orchestrates the generation of a single report chapter based on a topic/question.",
            "observations": [
                "Retrieves context using `get_paper_context`.",
                "Calls LLM using `call_model`.",
                "Formats references.",
                "Handles retries and potential errors."
            ]
        },
        {
            "id": "step2.py#load_vector_store",
            "name": "load_vector_store",
            "type": "function",
            "filePath": "step2.py",
            "summary": "Loads the FAISS index and metadata created by step1.py into a LangChain vector store object.",
            "observations": [
                "Uses `HuggingFaceEmbeddings` and `FAISS` from LangChain.",
                "Reads from './embeddings' potentially via './converted_index'."
            ]
        },
        {
            "id": "step2.py#CustomGemmaClient",
            "name": "CustomGemmaClient",
            "type": "class",
            "filePath": "step2.py",
            "summary": "Custom client for interacting with Gemma models, handling prompt formatting and response generation.",
            "observations": [
                "Used by Autogen agents.",
                "Manages shared model loading via `load_shared_model`."
            ]
        },
        {
            "id": "rewrite_function.py#CustomGemmaClient",
            "name": "CustomGemmaClient",
            "type": "class",
            "filePath": "rewrite_function.py",
            "summary": "Custom client for interacting with Gemma models (likely shared or duplicated logic with step2.py).",
            "observations": [
                "Handles model interaction for the `rewrite_text` function."
            ]
        },
        {
            "id": "rewrite_function.py#rewrite_text",
            "name": "rewrite_text",
            "type": "function",
            "filePath": "rewrite_function.py",
            "summary": "Core function to rewrite text based on a list of improvement points using an LLM.",
            "observations": [
                "Called by `step3.py`.",
                "Uses `CustomGemmaClient`.",
                "Handles prompt creation and response cleaning."
            ]
        },
        {
            "id": "step3.py#TechnicalAccuracyAgent",
            "name": "TechnicalAccuracyAgent",
            "type": "class",
            "filePath": "step3.py",
            "summary": "Autogen agent specializing in reviewing text for technical accuracy.",
            "observations": [
                "Inherits from `autogen.AssistantAgent`.",
                "Provides feedback as a numbered list."
            ]
        },
        {
            "id": "step3.py#ClarityAgent",
            "name": "ClarityAgent",
            "type": "class",
            "filePath": "step3.py",
            "summary": "Autogen agent specializing in reviewing text for clarity and readability.",
            "observations": [
                "Inherits from `autogen.AssistantAgent`.",
                "Provides feedback as a numbered list."
            ]
        },
        {
            "id": "step3.py#StructureAgent",
            "name": "StructureAgent",
            "type": "class",
            "filePath": "step3.py",
            "summary": "Autogen agent specializing in reviewing text for structure and flow.",
            "observations": [
                "Inherits from `autogen.AssistantAgent`.",
                "Provides feedback as a numbered list."
            ]
        },
        {
            "id": "step3.py#FactCheckingAgent",
            "name": "FactCheckingAgent",
            "type": "class",
            "filePath": "step3.py",
            "summary": "Autogen agent specializing in reviewing text for factual accuracy against provided references.",
            "observations": [
                "Inherits from `autogen.AssistantAgent`.",
                "Provides feedback as a numbered list."
            ]
        },
        {
            "id": "step3.py#ModeratorAgent",
            "name": "ModeratorAgent",
            "type": "class",
            "filePath": "step3.py",
            "summary": "Autogen agent responsible for synthesizing feedback from specialist agents and generating a consolidated list of improvements.",
            "observations": [
                "Inherits from `autogen.AssistantAgent`.",
                "Orchestrates the feedback consolidation."
            ]
        },
        {
            "id": "step3.py#selective_review_section",
            "name": "selective_review_section",
            "type": "function",
            "filePath": "step3.py",
            "summary": "Manages the review process for a section, invoking only the necessary Autogen agents based on quality metrics.",
            "observations": [
                "Called iteratively in `main`."
            ]
        },
        {
            "id": "step3.py#assess_quality",
            "name": "assess_quality",
            "type": "function",
            "filePath": "step3.py",
            "summary": "Calls evaluation functions from `final_evaluation.py` to assess the quality of rewritten text.",
            "observations": [
                "Integrates the external evaluation module."
            ]
        },
        {
            "id": "final_evaluation.py#calculate_technical_depth",
            "name": "calculate_technical_depth",
            "type": "function",
            "filePath": "final_evaluation.py",
            "summary": "Calculates a technical depth score using term dictionaries, NLP analysis, and LLM evaluation.",
            "observations": [
                "Combines multiple methods for robustness."
            ]
        },
        {
            "id": "final_evaluation.py#calculate_clarity",
            "name": "calculate_clarity",
            "type": "function",
            "filePath": "final_evaluation.py",
            "summary": "Calculates a clarity score using Gunning Fog index, coherence analysis, and LLM evaluation.",
            "observations": [
                "Uses `textstat` and `ContextualCoherenceAnalyzer`."
            ]
        },
        {
            "id": "final_evaluation.py#calculate_structure",
            "name": "calculate_structure",
            "type": "function",
            "filePath": "final_evaluation.py",
            "summary": "Calculates a structure score using topic hierarchy analysis (LDA) and LLM evaluation.",
            "observations": [
                "Uses `sklearn` for LDA."
            ]
        },
        {
            "id": "final_evaluation.py#evaluate_citation_accuracy",
            "name": "evaluate_citation_accuracy",
            "type": "function",
            "filePath": "final_evaluation.py",
            "summary": "Evaluates the accuracy of claims against cited references using an LLM (GPT-4).",
            "observations": [
                "Requires `referenced_papers` data.",
                "Focuses on matching claims to specific reference content."
            ]
        }
    ],
    "edges": [
        {
            "source": "batch_script.sh",
            "target": "step1.py",
            "relationship": "executes",
            "description": "Executes step 1 (indexing)."
        },
        {
            "source": "batch_script.sh",
            "target": "step2.py",
            "relationship": "executes",
            "description": "Executes step 2 (report generation)."
        },
        {
            "source": "batch_script.sh",
            "target": "step3.py",
            "relationship": "executes",
            "description": "Executes step 3 (review/rewrite)."
        },
        {
            "source": "batch_script.sh",
            "target": "step4.py",
            "relationship": "executes",
            "description": "Executes step 4 (diagram generation)."
        },
        {
            "source": "batch_script.sh",
            "target": "fine_tune.py",
            "relationship": "executes",
            "description": "Executes fine-tuning script."
        },
        {
            "source": "step3.py",
            "target": "rewrite_function.py#rewrite_text",
            "relationship": "calls",
            "description": "Calls rewrite function for text improvement."
        },
        {
            "source": "step3.py",
            "target": "final_evaluation.py#assess_quality",
            "relationship": "calls",
            "description": "Calls quality assessment functions."
        }, 
        {
            "source": "step3.py",
            "target": "rewrite_function.py#CustomGemmaClient",
            "relationship": "uses_class",
            "description": "Likely uses the shared LLM client."
        },
        {
            "source": "step2.py",
            "target": "rewrite_function.py#CustomGemmaClient",
            "relationship": "uses_class",
            "description": "Uses the shared LLM client."
        },
        {
            "source": "step2.py",
            "target": "step1.py",
            "relationship": "uses_output_from",
            "description": "Reads FAISS index from step1's output."
        },
        {
            "source": "step3.py",
            "target": "step2.py",
            "relationship": "uses_output_from",
            "description": "Reads initial chapters from step2's output."
        },
        {
            "source": "step4.py",
            "target": "step3.py",
            "relationship": "uses_output_from",
            "description": "Reads final markdown chapters from step3's output."
        },
        {
            "source": "fine_tune.py",
            "target": "step3.py",
            "relationship": "uses_output_from",
            "description": "Reads final markdown chapters from step3's output for training."
        },
        {
            "source": "step1.py",
            "target": "dir_files_mmd",
            "relationship": "reads_from",
            "description": "Reads input markdown files."
        },
        {
            "source": "step1.py",
            "target": "dir_embeddings",
            "relationship": "writes_to",
            "description": "Writes FAISS index and metadata."
        },
        {
            "source": "step2.py",
            "target": "dir_embeddings",
            "relationship": "reads_from",
            "description": "Reads FAISS index and metadata."
        },
        {
            "source": "step2.py",
            "target": "dir_initial_chapters",
            "relationship": "writes_to",
            "description": "Writes generated JSON chapters."
        },
        {
            "source": "step3.py",
            "target": "dir_initial_chapters",
            "relationship": "reads_from",
            "description": "Reads initial JSON chapters."
        },
        {
            "source": "step3.py",
            "target": "dir_outputs",
            "relationship": "writes_to",
            "description": "Writes consolidated review JSON outputs."
        },
        {
            "source": "step3.py",
            "target": "dir_chapter_markdowns",
            "relationship": "writes_to",
            "description": "Writes final improved markdown chapters."
        },
        {
            "source": "step3.py",
            "target": "dir_logs",
            "relationship": "writes_to",
            "description": "Writes log files."
        },
        {
            "source": "step4.py",
            "target": "dir_chapter_markdowns",
            "relationship": "reads_from",
            "description": "Reads final markdown chapters."
        },
        {
            "source": "step4.py",
            "target": "dir_chapter_diagrams",
            "relationship": "writes_to",
            "description": "Writes generated Mermaid diagrams."
        },
        {
            "source": "step4.py",
            "target": "dir_logs",
            "relationship": "writes_to",
            "description": "Writes log files."
        },
        {
            "source": "fine_tune.py",
            "target": "dir_chapter_markdowns",
            "relationship": "reads_from",
            "description": "Reads markdown chapters for training data."
        },
        {
            "source": "fine_tune.py",
            "target": "dir_fine_tuned_model",
            "relationship": "writes_to",
            "description": "Saves the fine-tuned model."
        },
        {
            "source": "fine_tune.py",
            "target": "dir_logs",
            "relationship": "writes_to",
            "description": "Writes fine-tuning logs."
        },
        {
            "source": "step1.py",
            "target": "step1.py#create_faiss_database",
            "relationship": "defines"
        },
        {
            "source": "step2.py",
            "target": "step2.py#generate_report",
            "relationship": "defines"
        },
        {
            "source": "step2.py",
            "target": "step2.py#CustomGemmaClient",
            "relationship": "defines"
        },
        {
            "source": "rewrite_function.py",
            "target": "rewrite_function.py#rewrite_text",
            "relationship": "defines"
        },
        {
            "source": "step3.py",
            "target": "step3.py#TechnicalAccuracyAgent",
            "relationship": "defines"
        },
        {
            "source": "step3.py",
            "target": "step3.py#ClarityAgent",
            "relationship": "defines"
        },
        {
            "source": "step3.py",
            "target": "step3.py#StructureAgent",
            "relationship": "defines"
        },
        {
            "source": "step3.py",
            "target": "step3.py#FactCheckingAgent",
            "relationship": "defines"
        },
        {
            "source": "step3.py",
            "target": "step3.py#ModeratorAgent",
            "relationship": "defines"
        },
        {
            "source": "final_evaluation.py",
            "target": "final_evaluation.py#calculate_technical_depth",
            "relationship": "defines"
        },
        {
            "source": "environment.yml",
            "target": "step1.py",
            "relationship": "configures"
        },
        {
            "source": "environment.yml",
            "target": "step2.py",
            "relationship": "configures"
        },
        {
            "source": "environment.yml",
            "target": "step3.py",
            "relationship": "configures"
        },
        {
            "source": "environment.yml",
            "target": "step4.py",
            "relationship": "configures"
        },
        {
            "source": "environment.yml",
            "target": "rewrite_function.py",
            "relationship": "configures"
        },
        {
            "source": "environment.yml",
            "target": "final_evaluation.py",
            "relationship": "configures"
        },
        {
            "source": "environment.yml",
            "target": "fine_tune.py",
            "relationship": "configures"
        }
    ]
}